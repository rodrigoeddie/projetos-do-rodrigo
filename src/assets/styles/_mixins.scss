// Mixins

.group {
    zoom: 1;

    &:after,
    &:before {
        content: '';
        display: table;
    }
    &:after {
        clear: both;
    }
}

.rmvtxt_destroy {
    text-indent: 0;
    overflow: visible;
    display: block;
}

@mixin bg-image($url, $w: inherit, $h: inherit) {
    @extend .rmvtxt;

    width: $w;
    height: $h;
    background: url($url) no-repeat;
}

@mixin bg($url, $size) {
    background: url($url) no-repeat top center;
    -webkit-background-size: $size;
            background-size: $size;
}

@mixin opacity($allBrowsers) {
    $IE: $allBrowsers * 100;
    opacity: $allBrowsers;
    filter: alpha(opacity= $IE);
}

@mixin font-face($family, $fileName, $weight, $style) {
    @font-face {
        font-display: swap;
        font-family: $family;
        src: url('#{$path-font}/#{$fileName}.woff2') format('woff2'),
            url('#{$path-font}/#{$fileName}.woff') format('woff');
        font-weight: $weight;
        font-style: $style;
    }
}

@mixin circle($dimension) {
    width: $dimension;
    height: $dimension;
    border-radius: $dimension;
}

// Extends
.rmvtxt {
    text-indent: -9999px;
    overflow: hidden;
    display: block;
}
//
//  MEDIA QUERIES
//––––––––––––––––––––––––––––––––––––––––––––––––––

// A map of breakpoints.
$breakpoints: (
  xs: 576px,
  sm: 768px,
  md: 992px,
  lg: 1200px
);


//
//  RESPOND ABOVE
//––––––––––––––––––––––––––––––––––––––––––––––––––

// @include respond-above(sm) {}
@mixin min($breakpoint) {

  // If the breakpoint exists in the map.
  @if map-has-key($breakpoints, $breakpoint) {

    // Get the breakpoint value.
    $breakpoint-value: map-get($breakpoints, $breakpoint);

    // Write the media query.
    @media (min-width: $breakpoint-value) {
      @content;
    }

  // If the breakpoint doesn't exist in the map.
  } @else {

    // Log a warning.
    @warn 'Invalid breakpoint: #{$breakpoint}.';
  }
}


//
//  RESPOND BELOW
//––––––––––––––––––––––––––––––––––––––––––––––––––

// @include respond-below(sm) {}
@mixin max($breakpoint) {

  // If the breakpoint exists in the map.
  @if map-has-key($breakpoints, $breakpoint) {

    // Get the breakpoint value.
    $breakpoint-value: map-get($breakpoints, $breakpoint);

    // Write the media query.
    @media (max-width: ($breakpoint-value - 1)) {
      @content;
    }

  // If the breakpoint doesn't exist in the map.
  } @else {

    // Log a warning.
    @warn 'Invalid breakpoint: #{$breakpoint}.';
  }
}


//
//  RESPOND BETWEEN
//––––––––––––––––––––––––––––––––––––––––––––––––––

// @include respond-between(sm, md) {}
@mixin between($lower, $upper) {

  // If both the lower and upper breakpoints exist in the map.
  @if map-has-key($breakpoints, $lower) and map-has-key($breakpoints, $upper) {

    // Get the lower and upper breakpoints.
    $lower-breakpoint: map-get($breakpoints, $lower);
    $upper-breakpoint: map-get($breakpoints, $upper);

    // Write the media query.
    @media (min-width: $lower-breakpoint) and (max-width: ($upper-breakpoint - 1)) {
      @content;
    }

  // If one or both of the breakpoints don't exist.
  } @else {

    // If lower breakpoint is invalid.
    @if (map-has-key($breakpoints, $lower) == false) {

      // Log a warning.
      @warn 'Your lower breakpoint was invalid: #{$lower}.';
    }

    // If upper breakpoint is invalid.
    @if (map-has-key($breakpoints, $upper) == false) {

      // Log a warning.
      @warn 'Your upper breakpoint was invalid: #{$upper}.';
    }
  }
}
